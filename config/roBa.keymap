#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    behaviors {
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                        &kp T                                                                     &kp Y        &kp U  &kp I      &kp O      &kp P
&kp A      &kp S         &kp D         &kp F                        &kp G                   &mkp MCLK                          &kp EQUAL      &kp H        &kp J  &kp K      &kp L      &lt 3 MINUS
&kp Z      &kp X         &kp C         &kp V                        &kp B                   &kp LEFT_SHIFT                     &mt TAB TILDE  &kp N        &kp M  &kp COMMA  &lt 5 DOT  &lt 7 SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 INT_HENKAN  &lt_to_layer_0 1 SPACE  &lt_to_layer_0 3 INT_MUHENKAN      &kp BACKSPACE  &lt 2 ENTER                               &kp DEL
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&kp K_LOCK   &trans     &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS                               &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON  &kp SQT            &kp INT_YEN
&kp C_SLEEP  &kp TILDE  &kp DOLLAR       &kp PERCENT   &kp CARET             &trans              &trans   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON      &kp DOUBLE_QUOTES  &kp NON_US_BACKSLASH
&kp C_POWER  &trans     &kp EXCLAMATION  &kp AT        &kp HASH              &kp LEFT_SHIFT      &kp TAB  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LESS_THAN  &kp GREATER_THAN   &kp PIPE
&trans       &trans     &trans           &trans        &trans                &trans              &trans   &trans                                                                         &kp LG(H)
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        NUM {
            bindings = <
&kp C_VOLUME_UP    &kp F10       &kp F7        &kp F8          &kp F9                                         &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS      &kp MINUS
&kp C_VOLUME_DOWN  &kp F11       &kp F4        &kp F5          &kp F6     &kp LEFT_SHIFT        &kp EQUAL     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK  &kp SLASH
&kp K_MUTE         &kp F12       &kp F1        &kp F2          &kp F3     &kp ESC               &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp EQUAL
&kp LEFT_CONTROL   &kp LEFT_WIN  &kp LEFT_ALT  &kp INT_HENKAN  &kp SPACE  &kp INT_MUHENKAN      &trans        &trans                                                  &kp PRINTSCREEN
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        ARROW {
            bindings = <
&trans            &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)      &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)                                         &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)      &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)      &trans
&kp PAGE_UP       &kp HOME            &kp LC(LG(LEFT_ARROW))  &kp UP_ARROW      &kp LG(LC(RIGHT_ARROW))  &kp LEFT_SHIFT      &kp PG_UP      &kp HOME            &kp LC(LG(LEFT_ARROW))  &kp UP_ARROW      &kp LC(LG(RIGHT_ARROW))  &trans
&kp PAGE_DOWN     &kp END             &kp LEFT_ARROW          &kp DOWN_ARROW    &kp RIGHT_ARROW          &kp LEFT_SHIFT      &kp PAGE_DOWN  &kp END             &kp LEFT_ARROW          &kp DOWN_ARROW    &kp RIGHT_ARROW          &trans
&kp LEFT_CONTROL  &kp LEFT_WIN        &kp LEFT_ALT            &trans            &trans                   &trans              &kp RS(COMMA)  &kp RS(PERIOD)                                                                         &trans
            >;

            sensor-bindings = <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&kp Q   &kp W   &kp E   &trans  &trans                                                   &kp RC(T)              &kp LA(LEFT_ARROW)  &mkp MB3     &kp RA(RIGHT_ARROW)  &kp RC(RS(T))
&kp A   &kp S   &kp D   &trans  &trans         &trans              &kp RG(E)             &kp RC(W)              &kp LS(LC(TAB))     &kp RG(TAB)  &kp RC(TAB)          &trans
&trans  &trans  &trans  &trans  &trans         &kp LEFT_SHIFT      &kp RG(NUMBER_1)      &kp RC(E)              &mkp MB1            &mkp MB2     &trans               &trans
&trans  &trans  &trans  &trans  &kp LG(SPACE)  &trans              &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)                                                        &kp RA(F4)
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };
    };
};
